#!/bin/bash
set -e

cd $(dirname $0)/..

# load .env
if [ -f .env ]
then
  # exclude WELCOME_MESSAGE && WELCOME_FOOTER because it may contain invalid characters
  export $(cat .env | sed 's/#.*//g' | grep -v "WELCOME_FOOTER" | grep -v "WELCOME_MESSAGE" | xargs)
fi

# check for non-optional environment variables,
# which got introduced later and may miss in existing
# .env files during upgrades
if [ -z "$EXTERNAL_IPv4" ]; then
    echo "ERROR: EXTERNAL_IPv4 is not set in .env"
    echo "BBB won't work without it."
    echo "this can happen if you did an manual upgrade without executing"
    echo "   ./scripts/upgrade"
    echo "try to run it again"
    exit 1
fi

# check for blocked TURN port
# https://github.com/bigbluebutton/docker/issues/73
if [ -n "$TURN_SERVER" ]; then
    port=$(echo $TURN_SERVER | awk -F: '{print $3}' | awk -F'?'  '{print $1}')
    if [[ "$port" -lt "1024" ]] && [ "$port" != "443" ] && [ "$port" != "80" ]; then
        echo "-------------------------------------"
        echo "ERROR: you use the TURN port $port, which gets blocked by recent browser"
        echo "releases, leading BBB throwing always an 1006 error, connecting impossible."
        echo ""
        echo "If you use the integrated TURN server, there is currently no way to make it"
        echo "work. so you should disable the server by emptying the TURN_SERVER variable"
        echo "in .env"
        echo "If you use an external TURN server with an own IP, you should switch to"
        echo "port 443"
        echo ""
        echo "More Information: https://github.com/bigbluebutton/docker/issues/73"
        echo
        echo "current setting:"
        echo "TURN_SERVER=$TURN_SERVER"
        echo "-------------------------------------"
        exit 1
    fi
fi

# set conditional variables
export CERTIFICATE_DOMAINS=$DOMAIN
export GREENLIGHT_ENDPOINT=https://$DOMAIN/bigbluebutton/api/
if [ "$DEV_MODE" == true ]; then
    export CERTIFICATE_DOMAINS="invalid"
    export GREENLIGHT_ENDPOINT=http://10.7.7.1:8080/bigbluebutton/api/
fi
if [ ! -z "$EXTERNAL_IPv6" ]; then
    export HTTPS_SITE_FILE="site.conf"
else
    export HTTPS_SITE_FILE="site-ipv4only.conf"
fi

# concatenate docker-compose file
docker-compse docker-compse.traefik.yml


PRE_FILE ="-f docker-compose.mariadb.yml"

docker-compose $PRE_FILE $@

COMPOSE_FILES="-f docker-compose.yml"
if [ "$ENABLE_HTTPS_PROXY" == true ]; then
    COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.https.yml"
fi

if [ "$ENABLE_COTURN" == true ]; then
    COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.coturn.yml"
fi

if [ "$ENABLE_GREENLIGHT" == true ]; then
    COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.greenlight.yml"
fi

if [ "$ENABLE_WEBHOOKS" == true ]; then
    COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.webhooks.yml"
fi

if [ "$ENABLE_PROMETHEUS_EXPORTER" == true ]; then
    COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.prometheus.yml"
fi

if [ "$ENABLE_RECORDING" == true ]; then
    COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.recordings.yml"
fi

docker-compose $COMPOSE_FILES $@
